- Functional:
    - export as ESRI WKT 1 ?
    - WKTv2 Bison based validator ?
    - import from Proj4
            init= syntax
    - derived crs
    - test sphericalCS
    - identification of CRS code from registry from name, etc
    - proj.db: integrate ESRI catalog ?
    - identify ? (cf OSRFindMatches)

    - transformation with WEST longitude
    GEOGCS["Mars2015",
        DATUM["D_Mars_2015",
            SPHEROID["Mars_2015_IAU_OCENTRIC",3396190,169.89444722360980],
            TOWGS84[0,0,0]],
        PRIMEM["Airy-0",0.0],
        UNIT["Degree",0.017453292519943295],
        AXIS["latitude",NORTH],
        AXIS["longitude",WEST]]
    - axis inversion for polar cases: EPSG 5041 (East-North) vs EPSG 32661 (North-East)
    - We might currently create COMPOUNDCRS of horiz CRS + BoundCRS of VertCRS, which is apparently illegal

    - Time dependent stuff:
        - PointMotionOperation
        - time-specific Helmert (codes 1065 and 1066)
        - sourceEpochCoordinate and targetEpochCoordinate in CoordinateOperation are unused/unset

    - add the 51 HARN grids in grid_alternatives

    - multi intermediate coordinate transforms ?? like

OGRFeature(epsg_coordoperation):10013
  coord_op_name (String) = NAD83 to NAVD88 height (1)
  coord_op_type (String) = transformation
  source_crs_code (Integer) = 4269
  target_crs_code (Integer) = 5703

OGRFeature(epsg_coordoperation):1188
  coord_op_name (String) = NAD83 to WGS 84 (1)
  coord_op_type (String) = transformation
  source_crs_code (Integer) = 4269
  target_crs_code (Integer) = 4326

4326 <--> 4979
  
OGRFeature(epsg_coordoperation):3859
  coord_op_name (String) = WGS 84 to EGM2008 height (2)
  coord_op_type (String) = transformation
  source_crs_code (Integer) = 4979
  target_crs_code (Integer) = 3855

- More tests
- Address TODO and FIXME

- Once integrated with GDAL, test with BAG WKT

~~~~~~~~~~~~~~~~~~~

 E.g. to
> have system proj.db and user proj.db with customizations?

That's another issue. An easy solution would be to copy the system proj.db in 
a editable location and point PROJ_LIB to it

Having both at the same time is more tricky. For example if you add custom 
transformations in the user proj.db between official CRS of the system 
proj.db, you'd have an issue with broken foreign keys, so the user proj.db 
shouldn't enforce foreign keys.
and then PROJ could potentially create a in-memory database, that would ATTACH 
DATABASE the official and custom one, and for every table, create a temporary 
view that UNION ALL the tables of both dbs. Then that would be transparent for 
the rest of the code that does database queries.

~~~~~~~~~~~~~~~~~~~~~

IGNF registry

There's a much better way to build the IGNF registry using the .xml file at
https://registre.ign.fr/ign/IGNF/IGNF/
More details:
https://lists.osgeo.org/pipermail/francophone/2018-October/006240.html
