/* enable predefined math constants M_* for MS Visual Studio */
#if defined(_MSC_VER) || defined(_WIN32)
#ifndef _USE_MATH_DEFINES
#define _USE_MATH_DEFINES
#endif
#endif

#include <cmath>
#include <cstdint>
#include <errno.h>

#include "proj.h"
#include "proj_internal.h"

PROJ_HEAD(airocean, "Airocean") "\n\tMisc, Sph&Ell";


namespace { // anonymous namespace
    struct pj_face {
        PJ_XYZ p1;
        PJ_XYZ p2;
        PJ_XYZ p3;
    };
}


/*
    The vertices of the faces of the icosahedron are inspired by those used by Robert W. Gray.

    Original Reference:
    Robert W. Gray (1995) Exact Transformation Equations for
        Fuller's World Map, Vol. 32. Autumn, 1995, pp. 17-25.

    To accomodate for land parts that would be interrupted by using a mere icosahedron,
    some faces are split in two (Australia) and 3 (Japan) subfaces.

    The parameters below were computed using the script located at:
    scripts/build_airocean_parameters.ipynb 
    (relative to the root of the project)
*/
// Define the 23 faces and subfaces
constexpr pj_face base_ico_faces[23] = {{{0.42015243, 0.07814525, 0.90408255}, {0.51883673, 0.83542038, 0.18133184}, {0.99500944, -0.0913478, 0.04014718}}, {{0.42015243, 0.07814525, 0.90408255}, {-0.41468223, 0.65596241, 0.63067581}, {0.51883673, 0.83542038, 0.18133184}}, {{0.42015243, 0.07814525, 0.90408255}, {-0.51545596, -0.3817169, 0.76720099}, {-0.41468223, 0.65596241, 0.63067581}}, {{0.42015243, 0.07814525, 0.90408255}, {0.3557814, -0.84358, 0.40223423}, {-0.51545596, -0.3817169, 0.76720099}}, {{0.42015243, 0.07814525, 0.90408255}, {0.99500944, -0.0913478, 0.04014718}, {0.3557814, -0.84358, 0.40223423}}, {{0.99500944, -0.0913478, 0.04014718}, {0.51883673, 0.83542038, 0.18133184}, {0.51545596, 0.3817169, -0.76720099}}, {{0.51545596, 0.3817169, -0.76720099}, {0.51883673, 0.83542038, 0.18133184}, {-0.3557814, 0.84358, -0.40223423}}, {{-0.3557814, 0.84358, -0.40223423}, {0.51883673, 0.83542038, 0.18133184}, {-0.41468223, 0.65596241, 0.63067581}}, {{-0.51545596, -0.3817169, 0.76720099}, {-0.99500944, 0.0913478, -0.04014718}, {-0.41468223, 0.65596241, 0.63067581}}, {{-0.51545596, -0.3817169, 0.76720099}, {-0.51883673, -0.83542038, -0.18133184}, {-0.99500944, 0.0913478, -0.04014718}}, {{-0.51545596, -0.3817169, 0.76720099}, {0.3557814, -0.84358, 0.40223423}, {-0.51883673, -0.83542038, -0.18133184}}, {{-0.51883673, -0.83542038, -0.18133184}, {0.3557814, -0.84358, 0.40223423}, {0.41468223, -0.65596241, -0.63067581}}, {{0.41468223, -0.65596241, -0.63067581}, {0.3557814, -0.84358, 0.40223423}, {0.99500944, -0.0913478, 0.04014718}}, {{0.51545596, 0.3817169, -0.76720099}, {0.41468223, -0.65596241, -0.63067581}, {0.99500944, -0.0913478, 0.04014718}}, {{-0.42015243, -0.07814525, -0.90408255}, {-0.3557814, 0.84358, -0.40223423}, {-0.99500944, 0.0913478, -0.04014718}}, {{-0.42015243, -0.07814525, -0.90408255}, {-0.99500944, 0.0913478, -0.04014718}, {-0.51883673, -0.83542038, -0.18133184}}, {{-0.42015243, -0.07814525, -0.90408255}, {-0.51883673, -0.83542038, -0.18133184}, {0.41468223, -0.65596241, -0.63067581}}, {{-0.42015243, -0.07814525, -0.90408255}, {0.41468223, -0.65596241, -0.63067581}, {0.51545596, 0.3817169, -0.76720099}}, {{-0.3557814, 0.84358, -0.40223423}, {-0.38796691, 0.38271738, -0.65315839}, {0.51545596, 0.3817169, -0.76720099}}, {{-0.42015243, -0.07814525, -0.90408255}, {0.51545596, 0.3817169, -0.76720099}, {-0.38796691, 0.38271738, -0.65315839}}, {{-0.99500944, 0.0913478, -0.04014718}, {-0.3557814, 0.84358, -0.40223423}, {-0.58849102, 0.53029673, 0.0627648}}, {{-0.3557814, 0.84358, -0.40223423}, {-0.41468223, 0.65596241, 0.63067581}, {-0.58849102, 0.53029673, 0.0627648}}, {{-0.99500944, 0.0913478, -0.04014718}, {-0.58849102, 0.53029673, 0.0627648}, {-0.41468223, 0.65596241, 0.63067581}}};
// // Define the centers for each face or subface
constexpr PJ_XYZ base_ico_centers[23] = {{0.6446662, 0.27407261, 0.37518718999999995}, {0.1747689766666667, 0.5231760133333333, 0.5720300666666667}, {-0.16999525333333332, 0.11746358666666666, 0.7673197833333334}, {0.08682595666666666, -0.38238388333333334, 0.69117259}, {0.5903144233333334, -0.28559418333333336, 0.44882131999999997}, {0.6764340433333333, 0.37526316, -0.18190732333333334}, {0.22617043, 0.68690576, -0.3293677933333333}, {-0.08387563333333335, 0.77832093, 0.13659113999999997}, {-0.6417158766666667, 0.12186443666666665, 0.45257653999999997}, {-0.6764340433333333, -0.37526316, 0.18190732333333334}, {-0.22617043, -0.68690576, 0.3293677933333333}, {0.08387563333333335, -0.77832093, -0.13659113999999997}, {0.5884910233333334, -0.5302967366666668, -0.06276479999999997}, {0.6417158766666667, -0.12186443666666665, -0.45257653999999997}, {-0.5903144233333334, 0.28559418333333336, -0.44882131999999997}, {-0.6446662, -0.27407261, -0.37518718999999995}, {-0.1747689766666667, -0.5231760133333333, -0.5720300666666667}, {0.16999525333333332, -0.11746358666666668, -0.7673197833333334}, {-0.07609744999999997, 0.5360047600000001, -0.6075312033333334}, {-0.09755446, 0.22876301, -0.7748139766666666}, {-0.6464272866666667, 0.48840817666666664, -0.12653887}, {-0.45298488333333337, 0.6766130466666667, 0.0970687933333333}, {-0.6660608966666667, 0.42586898, 0.21776447666666665}};
// // Define the normals for each face and subface
constexpr PJ_XYZ base_ico_normals[23] = {{0.8112534716456183, 0.3448953244235397, 0.4721387719026189}, {0.21993078167242514, 0.6583691769191125, 0.7198475381327677}, {-0.21392348218574597, 0.1478171768398566, 0.9656017947376752}, {0.10926252593733311, -0.48119515565604315, 0.8697775132750616}, {0.7428567271237952, -0.3593941714860216, 0.5648005953155497}, {0.8512303999921011, 0.4722343774266651, -0.22891373682183738}, {0.28461480749719364, 0.8644080979012073, -0.4144792535654255}, {-0.1055498134715015, 0.9794457311974099, 0.17188745304792394}, {-0.80754076069938, 0.15335524153301364, 0.5695261975567215}, {-0.8512303999921011, -0.4722343774266651, 0.22891373682183735}, {-0.28461480749719364, -0.8644080979012073, 0.4144792535654255}, {0.10554981347150154, -0.97944573119741, -0.17188745304792397}, {0.7405621455042509, -0.6673299596621295, -0.07898375518726185}, {0.80754076069938, -0.15335524153301364, -0.5695261975567215}, {-0.7428567271237952, 0.3593941714860216, -0.5648005953155497}, {-0.8112534716456183, -0.3448953244235397, -0.4721387719026189}, {-0.21993078167242514, -0.6583691769191125, -0.7198475381327677}, {0.21392348218574597, -0.1478171768398566, -0.9656017947376752}, {-0.1092625236946045, 0.48119515875463253, -0.8697775118425345}, {-0.10926252412771359, 0.4811951525529661, -0.8697775152191327}, {-0.7405621389792739, 0.6673299643797594, 0.07898377650727696}, {-0.7405621607654073, 0.6673299431834946, 0.07898375132383098}, {-0.7405621367680706, 0.6673299714231342, 0.07898373773067752}};

// /*
//     The points of the Airocean projection map are deduced from the unfolded net
//     of the altered icosahedron defined above.
//     The distances in the projected 2d space are expressed in meter.
// */
// // Define the 23 unfolded surfaces used (from icosahedron + split faces)
constexpr pj_face base_airocean_faces[23] = {{{1.8211859946200586, 3.1543866727148018, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {2.7317789919300877, 3.6801177848339353, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {0.9105929973100293, 2.628655560595668, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {0.9105929973100293, 2.628655560595668, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {2.7317789919300877, 3.6801177848339353, 1.0}, {2.7317789919300877, 2.628655560595668, 1.0}}, {{2.7317789919300877, 3.6801177848339353, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {2.7317789919300877, 4.731580009072203, 1.0}}, {{1.8211859946200586, 5.257311121191336, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {0.9105929973100293, 4.731580009072203, 1.0}}, {{0.9105929973100293, 4.731580009072203, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}, {{0.9105929973100293, 2.628655560595668, 1.0}, {0.0, 3.1543866727148018, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}, {{0.9105929973100293, 2.628655560595668, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}, {0.0, 2.1029244484765344, 1.0}}, {{0.9105929973100293, 2.628655560595668, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}}, {{0.9105929973100293, 1.5771933363574009, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}}, {{1.8211859946200586, 1.0514622242382672, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {2.7317789919300877, 1.5771933363574009, 1.0}}, {{1.8211859946200586, 0.0, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}, {2.7317789919300877, 0.5257311121191336, 1.0}}, {{0.0, 5.257311121191336, 1.0}, {0.9105929973100293, 4.731580009072203, 1.0}, {0.0, 4.205848896953069, 1.0}}, {{0.0, 1.0514622242382672, 1.0}, {0.0, 2.1029244484765344, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}}, {{0.9105929973100293, 0.5257311121191336, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}}, {{0.9105929973100293, 0.5257311121191336, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}, {1.8211859946200586, 0.0, 1.0}}, {{0.9105929973100293, 4.731580009072203, 1.0}, {0.45529649865501465, 4.994445565131769, 1.0}, {0.9105929973100293, 5.78304223331047, 1.0}}, {{0.9105929973100293, 0.5257311121191336, 1.0}, {1.8211859946200586, 0.0, 1.0}, {0.9105929973100293, 0.0, 1.0}}, {{0.0, 4.205848896953069, 1.0}, {0.9105929973100293, 4.731580009072203, 1.0}, {0.6070619982066862, 4.205848896953069, 1.0}}, {{0.9105929973100293, 4.731580009072203, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}, {0.6070619982066862, 4.205848896953069, 1.0}}, {{0.0, 3.1543866727148018, 1.0}, {0.3035309991033431, 3.6801177848339353, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}};

// /*
//     The parameters here are extracted from the transition matrices
//     that allow converting a icosahedron face or subface to its
//     corresponding face in the Airocean projected space.
//     Since only a few parameters of those matrices are relevant,
//     the irrelevant ones has been discarded.
// */
// // Icosahedron to Airocean (forward)
constexpr double base_ico_air_trans[23][4][4] = {{{0.5771127843628077, -0.601949070265588, -0.551904112682031, 2.1247169940181885}, {0.09385435254116901, 0.7202114456801385, -0.6873767816857262, 3.680117788550241}, {0.8112534716456183, 0.3448953244235397, 0.4721387719026189, -0.7946544736643394}, {0.0, 0.0, 0.0, 0.9999999999999999}}, {{0.9709901123098558, -0.21873613013519208, -0.09660585714762573, 1.5176549986755081}, {0.0938543523824071, 0.7202114501390866, -0.68737677703546, 3.6801177840642754}, {0.2199307816724251, 0.6583691769191125, 0.7198475381327677, -0.794654474160402}, {2.7755575615628914e-17, 0.0, 0.0, 1.0}}, {{0.9721374064326862, -0.06476823448972475, 0.2252863218604219, 1.2141239985420345}, {0.09584151545422234, 0.986891659675502, -0.12984315992304857, 3.1543866667568574}, {-0.213923482185746, 0.14781717683985665, 0.9656017947376753, -0.7946544722350559}, {-1.3877787807814457e-16, 2.7755575615628914e-17, 0.0, 1.0}}, {{0.9921258753005284, -0.0010987169074706963, -0.12523993179159917, 1.5176549936500534}, {0.06122047682547376, 0.8766128105888067, 0.4772861192297111, 2.628655561621354}, {0.1092625259373331, -0.48119515565604315, 0.8697775132750618, -0.794654472177355}, {1.1102230246251565e-16, 5.551115123125783e-17, 0.0, 1.0}}, {{0.2803041463023307, -0.5991800450797868, -0.7499419088911223, 2.428247994171984}, {0.6079419973098752, 0.7154153394798394, -0.3443652517634205, 3.1543866696341833}, {0.7428567271237952, -0.3593941714860217, 0.5648005953155497, -0.7946544741179917}, {0.0, 0.0, 0.0, 1.0000000000000002}}, {{0.25960661697438703, -0.758006957058587, -0.5983559612700025, 2.428247993923292}, {-0.4560824568641986, 0.44991125768827994, -0.7678337349017109, 4.205848897582435}, {0.8512303999921013, 0.4722343774266651, -0.22891373682183747, -0.7946544711481622}, {0.0, -5.551115123125783e-17, 1.1102230246251565e-16, 1.0}}, {{0.9586365727166021, -0.25808606588953303, 0.12003128712756019, 1.5176549950590994}, {-0.003215296199617759, -0.4314976538404806, -0.9021083296632684, 4.731580007956949}, {0.2846148074971938, 0.8644080979012073, -0.41447925356542553, -0.7946544719642821}, {0.0, -1.1102230246251565e-16, 0.0, 1.0}}, {{0.9928349393209477, 0.09405867905155406, 0.07370038213709272, 1.2141239979758605}, {0.0560180154856556, 0.1784349297842625, -0.9823558159365612, 4.205848903770237}, {-0.10554981347150151, 0.97944573119741, 0.17188745304792394, -0.794654473006748}, {-1.3877787807814457e-17, 0.0, 8.326672684688674e-17, 1.0}}, {{0.5819727853624432, 0.05026939328855433, 0.811653042180561, 0.6070619975564514}, {0.09584151340049132, 0.9868916600803643, -0.12984315836175953, 3.1543866646549703}, {-0.8075407606993799, 0.15335524153301364, 0.5695261975567214, -0.7946544732451482}, {0.0, -8.326672684688674e-17, 0.0, 1.0}}, {{0.5247823023520097, -0.7686380571359512, 0.36578553967256694, 0.6070619982034591}, {0.00321530314174359, 0.43149765221393604, 0.9021083304165357, 2.1029244497408546}, {-0.8512303999921013, -0.4722343774266651, 0.22891373682183733, -0.7946544711481622}, {1.1102230246251565e-16, 0.0, -2.7755575615628914e-17, 1.0}}, {{0.9586365727166023, -0.25808606588953276, 0.12003128712756019, 1.2141239968709887}, {0.0032152961996172996, 0.43149765384048056, 0.9021083296632679, 2.1029244473612816}, {-0.28461480749719376, -0.8644080979012073, 0.41447925356542553, -0.7946544719642822}, {-5.551115123125783e-17, 0.0, -5.551115123125783e-17, 1.0}}, {{0.9928349393209476, 0.09405867905155432, 0.0737003821370924, 1.5176549939542279}, {-0.05601801548565587, -0.17843492978426267, 0.982355815936562, 1.5771933431745697}, {0.10554981347150151, -0.97944573119741, -0.17188745304792394, -0.794654473006748}, {1.249000902703301e-16, 0.0, -8.326672684688674e-17, 1.0}}, {{0.6696489324143071, 0.7230710222271839, 0.16952465726532903, 2.124716992886465}, {-0.05601802147349406, -0.17843493406754668, 0.9823558148170956, 1.577193342141926}, {0.7405621455042507, -0.6673299596621294, -0.07898375518726183, -0.7946544743360283}, {1.1102230246251565e-16, 0.0, 5.551115123125783e-17, 0.9999999999999999}}, {{0.581972785362443, 0.05026939328855442, 0.8116530421805607, 2.124716994373637}, {-0.09584151340049174, -0.9868916600803641, 0.1298431583617594, 0.5257311040593022}, {0.8075407606993799, -0.15335524153301364, -0.5695261975567214, -0.7946544732451483}, {-1.1102230246251565e-16, -2.7755575615628914e-17, 0.0, 1.0}}, {{0.3863411405466375, 0.9191578807865023, 0.07674189823781499, 0.3035310024438569}, {0.5467215101388645, -0.16119747073988, -0.8216513703440179, 4.731580009447501}, {-0.7428567271237954, 0.35939417148602165, -0.5648005953155498, -0.7946544741179918}, {-1.1102230246251565e-16, 5.551115123125783e-17, 0.0, 1.0}}, {{0.20727613862501068, -0.9246959431881105, 0.31933369857041366, 0.30353100217436535}, {-0.5467215083775467, 0.16119746379435437, 0.8216513728786113, 1.5771933384708474}, {-0.8112534716456183, -0.34489532442353976, -0.4721387719026189, -0.7946544736643393}, {0.0, 1.1102230246251565e-16, 0.0, 1.0}}, {{0.9709901123098558, -0.21873613013519205, -0.09660585714762565, 1.2141239932545798}, {-0.09385435238240734, -0.7202114501390865, 0.6873767770354606, 1.0514622234686084}, {-0.21993078167242508, -0.6583691769191125, -0.7198475381327677, -0.794654474160402}, {0.0, -1.1102230246251565e-16, 0.0, 1.0}}, {{0.9721374064326864, -0.06476823448972478, 0.2252863218604222, 1.5176549933880534}, {-0.09584151545422273, -0.9868916596755019, 0.1298431599230487, 0.5257311061611902}, {0.21392348218574594, -0.14781717683985665, -0.965601794737675, -0.7946544722350558}, {-1.3877787807814457e-16, -2.7755575615628914e-17, 0.0, 1.0}}, {{0.5490814341445536, 0.7586196137281238, 0.3507219468201455, 0.6070619971385178}, {0.828595975697076, -0.43925791880424425, -0.34710402061504564, 5.257311122022961}, {-0.10926252369460446, 0.4811951587546325, -0.8697775118425342, -0.7946544734171301}, {8.326672684688674e-17, 0.0, 0.0, 0.9999999999999998}}, {{0.9921258803454628, -0.001098726158448999, -0.1252399351953353, 1.2141239965994974}, {-0.061220481001961057, -0.8766128044664807, -0.4772861112510543, 6.962719666473e-09}, {-0.10926252412771358, 0.48119515255296597, -0.8697775152191325, -0.79465447341713}, {-4.163336342344337e-17, -1.1102230246251565e-16, 0.0, 0.9999999999999999}}, {{0.6696489432944074, 0.7230710163882418, 0.16952466434270155, 0.6070620106869362}, {0.05601800780331223, 0.1784349479222583, -0.9823558101673974, 4.205848888056709}, {-0.7405621389792741, 0.6673299643797597, 0.07898377650727716, -0.7946544674186218}, {1.1102230246251565e-16, 0.0, -1.3877787807814457e-17, 1.0}}, {{0.6696489098267326, 0.7230710312696226, 0.16952465761975835, 0.6070619835219269}, {0.056018019261034786, 0.1784349316785832, -0.9823558153771896, 4.205848903740433}, {-0.7405621607654075, 0.6673299431834948, 0.07898375132383098, -0.7946544674186217}, {1.1102230246251565e-16, -1.1102230246251565e-16, 2.7755575615628914e-17, 0.9999999999999999}}, {{0.28631142864032966, 0.20700633361637605, 0.9355074196454307, 0.3035309858829332}, {0.6079420159049573, 0.7154153325157111, -0.34436525612985447, 3.680117806877694}, {-0.7405621367680707, 0.667329971423134, 0.07898373773067754, -0.7946544674186213}, {0.0, 0.0, 8.326672684688674e-17, 1.0}}};
// // Airocean to Icosahedron (inverse)
constexpr double base_air_ico_trans[23][4][4] = {{{0.5771127842542352, 0.09385434657102582, 0.8112534716456185, -0.9269301900000004}, {-0.6019490778198661, 0.7202114470147596, 0.3448953244235397, -1.0974189100000002}, {-0.5519041069771089, -0.6873767724024487, 0.47213877190261855, 4.077454710000002}, {0.0, 2.2204460492503126e-16, 0.0, 1.0}}, {{0.9709901268864738, 0.09385434657102582, 0.2199307816724253, -1.6442540899999996}, {-0.2187361374273623, 0.7202114470147596, 0.6583691769191118, -1.79532095}, {-0.09660585493174938, -0.687376772402449, 0.7198475381327685, 3.24827191}, {1.1102230246251565e-16, 0.0, 1.1102230246251565e-16, 1.0}}, {{0.9721374177212223, 0.09584151258786845, -0.21392348218574572, -1.6526118100000005}, {-0.06476823913013299, 0.9868916696001585, 0.14781717683985673, -2.9169376699999994}, {0.22528632507169927, -0.12984316207736876, 0.9656017947376752, 0.9033697900000001}, {1.1102230246251565e-16, 0.0, 0.0, 1.0}}, {{0.9921258758509998, 0.061220487542130664, 0.10926252593733322, -1.5798064099999996}, {-0.001098707109494417, 0.8766128052462792, -0.4811951556560428, -2.685029549999999}, {-0.12523992644012408, 0.4772861149277753, 0.8697775132750616, -0.3733772099999991}, {0.0, -2.465190328815662e-32, 0.0, 1.0000000000000002}}, {{0.28030414329344755, 0.6079419928405788, 0.7428567271237952, -2.00801767}, {-0.5991800415902347, 0.7154153355770391, -0.35939417148602165, -1.0873330499999998}, {-0.7499419027132015, -0.3443652483685888, 0.5648005953155497, 3.356127390000001}, {-1.1102230246251565e-16, 1.1102230246251565e-16, 0.0, 1.0}}, {{0.2596066197503542, -0.4560824620660179, 0.8512303999921011, 1.9642587099999997}, {-0.7580069603423448, 0.44991126556421224, 0.47223437742666524, 0.3236332399999994}, {-0.5983559577215728, -0.7678337379974675, -0.22891373682183738, 4.50044201}, {-1.1102230246251565e-16, -1.1102230246251565e-16, 0.0, 1.0}}, {{0.9586365671366947, -0.003215303338595427, 0.2846148074971937, -1.213495679999999}, {-0.25808606116480587, -0.431497651119788, 0.8644080979012073, 3.12025702}, {0.1200312931494973, -0.9021083288913834, -0.4144792535654252, 3.7568638500000016}, {0.0, -1.6653345369377373e-16, 0.0, 1.0}}, {{0.9928349412643155, 0.056018018186692914, -0.10554981347150141, -1.524903679999999}, {0.09405867962197714, 0.17843493154109227, 0.97944573119741, -0.08634833000000003}, {0.07370038008007025, -0.9823558242886872, 0.1718874530479236, 4.178749899999999}, {-1.1102230246251565e-16, 0.0, 0.0, 0.9999999999999996}}, {{0.5819727875851122, 0.0958415125878687, -0.8075407606993801, -1.2973306300000007}, {0.05026939053476542, 0.9868916696001588, 0.1533552415330134, -3.0216901300000005}, {0.8116530460736279, -0.12984316207736876, 0.5695261975567216, 0.36942835999999946}, {-1.1102230246251565e-16, -2.220446049250313e-16, 0.0, 1.0}}, {{0.5247823082449008, 0.0032153033385950414, -0.851230399992101, -1.0017709799999996}, {-0.7686380655985867, 0.43149765111978794, -0.4722343774266652, -0.81605916}, {0.3657855441277853, 0.9021083288913834, 0.2289137368218374, -1.9372128400000004}, {0.0, 6.096153978258407e-17, 0.0, 0.9999999999999998}}, {{0.9586365671366951, 0.0032153033385950484, -0.28461480749719337, -1.39683563}, {-0.2580860611648058, 0.43149765111978794, -0.8644080979012073, -1.28096424}, {0.12003129314949779, 0.9021083288913836, 0.41447925356542553, -1.7134307400000008}, {-1.1102230246251565e-16, 1.1102230246251565e-16, 0.0, 1.0}}, {{0.9928349412643155, -0.05601801818669286, 0.1055498134715019, -1.33455403}, {0.09405867962197711, -0.17843493154109227, -0.9794457311974099, -0.6396431699999997}, {0.07370038008007082, 0.9823558242886878, -0.17188745304792374, -1.7978079500000004}, {1.1102230246251565e-16, -2.220446049250313e-16, 0.0, 0.9999999999999998}}, {{0.6696489285568152, -0.05601801818669308, 0.7405621455042509, -0.74597219}, {0.723071017397498, -0.1784349315410924, -0.6673299596621297, -1.7851916300000001}, {0.16952466190275595, 0.982355824288688, -0.0789837551872621, -1.9723217899999996}, {0.0, -1.1102230246251565e-16, 0.0, 1.0}}, {{0.581972787585112, -0.09584151258786852, 0.80754076069938, -0.54442473}, {0.05026939053476491, -0.9868916696001588, -0.15335524153301358, 0.29016699000000007}, {0.8116530460736278, 0.12984316207736893, -0.5695261975567216, -2.2453721499999997}, {0.0, -1.1102230246251565e-16, 0.0, 1.0}}, {{0.386341138180555, 0.5467215052984484, -0.7428567271237957, -3.2944374800000005}, {0.9191578756618027, -0.16119746966924034, 0.35939417148602165, 0.7693200000000001}, {0.07674189808886517, -0.8216513632963648, -0.5648005953155493, 3.415594300000001}, {-1.1102230246251565e-16, 0.0, 0.0, 1.0}}, {{0.2072761437410203, -0.5467215052984483, -0.8112534716456183, 0.15470457999999998}, {-0.9246959481210651, 0.16119746966924028, -0.34489532442353976, -0.2476383}, {0.31933369338332074, 0.8216513632963647, -0.47213877190261877, -1.7680179200000001}, {0.0, 0.0, 0.0, 1.0}}, {{0.970990126886474, -0.09385434657102576, -0.2199307816724251, -1.25498709}, {-0.21873613742736212, -0.7202114470147594, -0.6583691769191123, 0.49967191}, {-0.09660585493174975, 0.6873767724024488, -0.7198475381327678, -1.17748929}, {0.0, 0.0, 0.0, 1.0}}, {{0.9721374177212225, -0.09584151258786833, 0.21392348218574608, -1.25498709}, {-0.06476823913013245, -0.9868916696001586, -0.14781717683985665, 0.49967190999999994}, {0.225286325071699, 0.12984316207736882, -0.9656017947376753, -1.17748929}, {1.1102230246251565e-16, 0.0, 0.0, 0.9999999999999999}}, {{0.5490814243871979, 0.828595968467787, -0.10926252369460442, -4.7763392200000006}, {0.7586195940894178, -0.4392579108912803, 0.4811951587546326, 2.2311702599999994}, {0.3507219371809713, -0.3471040153291294, -0.8697775118425345, 0.92075125}, {0.0, -1.1102230246251565e-16, 0.0, 0.9999999999999991}}, {{0.9921258703600726, -0.061220497052696075, -0.10926252412771353, -1.29138978}, {-0.0010987126004213489, -0.8766128147568447, 0.4811951525529661, 0.3837178600000002}, {-0.12523992644012394, -0.4772861149277757, -0.8697775152191326, -0.5391157899999999}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696489340477428, 0.05601800867612728, -0.7405621389792739, -1.230612719999998}, {0.7230710064156433, 0.17843495056222272, 0.6673299643797593, -0.659122639999999}, {0.1695246619027561, -0.9823558242886863, 0.07898377650727674, 4.091492979999993}, {-2.220446049250313e-16, 4.440892098500626e-16, 0.0, 1.0}}, {{0.6696489175749601, 0.05601801818669295, -0.7405621607654072, -1.230612749999999}, {0.723071039361207, 0.17843493154109233, 0.6673299431834945, -0.659122579999999}, {0.1695246619027577, -0.9823558242886873, 0.07898375132383063, 4.091492979999996}, {4.440892098500626e-16, 7.186231688523656e-17, 0.0, 0.9999999999999996}}, {{0.28631143196814535, 0.6079420023511448, -0.7405621367680713, -2.9126935900000026}, {0.20700633604348043, 0.7154153165559092, 0.6673299714231338, -2.165348740000002}, {0.9355074303409838, -0.34436524836858934, 0.07898373773067771, 1.0461139700000008}, {0.0, 0.0, 0.0, 1.0000000000000009}}};


// By default the resulting orientation of the projection is vertical
// the following transforms are used to alter the projection data
// so that the resulting orientation is horizontal instead
constexpr double orient_horizontal_trans[4][4] = {{0.0, -1.0, 0.0, 5.78304223331047}, {1.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 1.0, 0.0}, {0.0, 0.0, 0.0, 1.0}};
constexpr double orient_horizontal_inv_trans[4][4] = {{0.0, 1.0, 0.0, 0.0}, {-1.0, -0.0, -0.0, 5.78304223331047}, {0.0, 0.0, 1.0, 0.0}, {0.0, 0.0, 0.0, 1.0}};


namespace { // anonymous namespace

    struct pj_airocean_data {
        pj_face ico_faces[23] = {};
        PJ_XYZ ico_centers[23] = {};
        PJ_XYZ ico_normals[23] = {};
        pj_face airocean_faces[23] = {};
        double ico_air_trans[23][4][4] = {};
        double air_ico_trans[23][4][4] = {};

        void initialize() {
            memcpy((char *) this->ico_faces, (char *) base_ico_faces, sizeof(pj_face[23]));
            memcpy((char *) this->airocean_faces, (char *) base_airocean_faces, sizeof(pj_face[23]));
            memcpy(this->ico_centers, base_ico_centers, sizeof(PJ_XYZ[23]));
            memcpy(this->ico_normals, base_ico_normals, sizeof(PJ_XYZ[23]));
            memcpy(this->ico_air_trans, base_ico_air_trans, sizeof(double[23][4][4]));
            memcpy(this->air_ico_trans, base_air_ico_trans, sizeof(double[23][4][4]));
        }

        static void mat_mult(const double m1[4][4], const double m2[4][4], double res[4][4]) {
            for (unsigned char i = 0; i < 4; ++i)
                for (unsigned char j = 0; j < 4; ++j)
                    res[i][j] = (m1[i][0] * m2[0][j])
                            + (m1[i][1] * m2[1][j])
                            + (m1[i][2] * m2[2][j])
                            + (m1[i][3] * m2[3][j]);
        }

        static PJ_XYZ vec_mult(const double m[4][4], const PJ_XYZ * v) {
            double x = m[0][0] * v->x + m[0][1] * v->y + m[0][2] * v->z + m[0][3];
            double y = m[1][0] * v->x + m[1][1] * v->y + m[1][2] * v->z + m[1][3];
            double z = m[2][0] * v->x + m[2][1] * v->y + m[2][2] * v->z + m[2][3];
            return {x, y, z};
        }

        void transform(const double m[4][4], const double inv_m[4][4]) {
            for (unsigned char i=0; i < 23; i++) {
                mat_mult(m, base_ico_air_trans[i], this->ico_air_trans[i]);
                mat_mult(base_air_ico_trans[i], inv_m, this->air_ico_trans[i]);
                this->airocean_faces[i] = {
                    vec_mult(m, &base_airocean_faces[i].p1),
                    vec_mult(m, &base_airocean_faces[i].p2),
                    vec_mult(m, &base_airocean_faces[i].p3),
                };
            }

        }


    };



} // anonymous namespace




inline double det(const PJ_XYZ *u, const PJ_XYZ *v, const PJ_XYZ *w) {
    return (
        u->x * (v->y * w->z - v->z * w->y) -
        v->x * (u->y * w->z - u->z * w->y) +
        w->x * (u->y * v->z - u->z * v->y)
    );
}

inline bool is_point_in_face(const PJ_XYZ *p, const pj_face * face) {
    return (
        det(p, &face->p2, &face->p3) <= 0 &&
        det(&face->p1, p, &face->p3) <= 0 &&
        det(&face->p1, &face->p2, p) <= 0
    );
}


inline unsigned char get_ico_face_index(const pj_airocean_data * pj_data, const PJ_XYZ *p) {
    for (unsigned char i=0; i < 23; i++) {
        if (is_point_in_face(p, &pj_data->ico_faces[i])) {
            return i;
        }
    }

    return 23;
}

inline unsigned char get_dym_face_index(const pj_airocean_data * pj_data, const PJ_XY *p) {
    const PJ_XYZ pp{p->x, p->y, 1.0};
    for (unsigned char i=0; i < 23; i++) {
        if (is_point_in_face(&pp, &pj_data->airocean_faces[i])) {
            return i;
        }
    }

    return 23;
}

inline PJ_XY ico_to_dym(const pj_airocean_data * pj_data, const PJ_XYZ * p, unsigned char face_id) {
    return PJ_XY{
        pj_data->ico_air_trans[face_id][0][0] * p->x + // * -1
        pj_data->ico_air_trans[face_id][0][1] * p->y + // 
        pj_data->ico_air_trans[face_id][0][2] * p->z + // 
        pj_data->ico_air_trans[face_id][0][3],         // +1000
        pj_data->ico_air_trans[face_id][1][0] * p->x +
        pj_data->ico_air_trans[face_id][1][1] * p->y +
        pj_data->ico_air_trans[face_id][1][2] * p->z +
        pj_data->ico_air_trans[face_id][1][3],
    };
}

inline PJ_XYZ dym_to_ico(const pj_airocean_data * pj_data, const PJ_XY * p, unsigned char face_id) {
    return PJ_XYZ{
        pj_data->air_ico_trans[face_id][0][0] * p->x + // * -1
        pj_data->air_ico_trans[face_id][0][1] * p->y + // 
        pj_data->air_ico_trans[face_id][0][3],         // + [face_id][0][0] * 1000
        pj_data->air_ico_trans[face_id][1][0] * p->x +
        pj_data->air_ico_trans[face_id][1][1] * p->y +
        pj_data->air_ico_trans[face_id][1][3],
        pj_data->air_ico_trans[face_id][2][0] * p->x +
        pj_data->air_ico_trans[face_id][2][1] * p->y +
        pj_data->air_ico_trans[face_id][2][3],
    };
}

inline PJ_XYZ cartesian_to_ico(const pj_airocean_data * pj_data, const PJ_XYZ *p, unsigned char face_id) {
    const PJ_XYZ * center = &pj_data->ico_centers[face_id];
    const PJ_XYZ * normal = &pj_data->ico_normals[face_id];

    // cppcheck-suppress unreadVariable
    double a = 1.0 - (
        center->x * normal->x +
        center->y * normal->y +
        center->z * normal->z
    ) / (
        p->x * normal->x +
        p->y * normal->y +
        p->z * normal->z
    );

    return PJ_XYZ{
        p->x - a * p->x,
        p->y - a * p->y,
        p->z - a * p->z,
    };
}


// ============================================
//
//      The Forward and Inverse Functions
//
// ============================================
static PJ_XY airocean_forward(PJ_LP lp, PJ *P) {
    const struct pj_airocean_data *Q =
        static_cast<struct pj_airocean_data *>(P->opaque);

    double lat;

    /* Convert the geodetic latitude to a geocentric latitude.
     * This corresponds to the shift from the ellipsoid to the sphere
     * described in [LK12]. */
    if (P->es != 0.0) {
        double one_minus_f = 1.0 - (P->a - P->b) / P->a;
        double one_minus_f_squared = one_minus_f * one_minus_f;
        lat = atan(one_minus_f_squared * tan(lp.phi));
    } else {
        lat = lp.phi;
    }

    // Convert the lat/long to x,y,z on the unit sphere
    double x, y, z;
    double sinlat, coslat;
    double sinlon, coslon;

    sinlat = sin(lat);
    coslat = cos(lat);
    sinlon = sin(lp.lam);
    coslon = cos(lp.lam);
    x = coslat * coslon;
    y = coslat * sinlon;
    z = sinlat;

    PJ_XYZ cartesianPoint{x, y, z};

    unsigned char face_id = get_ico_face_index(Q, &cartesianPoint);

    PJ_XYZ icoPoint = cartesian_to_ico(Q, &cartesianPoint, face_id);

    PJ_XY airoceanPoint = ico_to_dym(Q, &icoPoint, face_id);


    return airoceanPoint;
}


static PJ_LP airocean_inverse(PJ_XY xy, PJ *P) {
    const struct pj_airocean_data *Q =
        static_cast<struct pj_airocean_data *>(P->opaque);

    PJ_LP lp = {0.0, 0.0};


    unsigned char face_id = get_dym_face_index(Q, &xy);

    if (face_id == 23) {
        // Point lies outside icosahedron net faces
        proj_errno_set(P, PROJ_ERR_COORD_TRANSFM_OUTSIDE_PROJECTION_DOMAIN);
        lp.lam = HUGE_VAL;
        lp.phi = HUGE_VAL;
        return lp;
    }

    PJ_XYZ sphereCoords = dym_to_ico(Q, &xy, face_id);

    double norm = sqrt((sphereCoords.x * sphereCoords.x) + (sphereCoords.y * sphereCoords.y) + (sphereCoords.z * sphereCoords.z));
    double q = sphereCoords.x / norm;
    double r = sphereCoords.y / norm;
    double s = sphereCoords.z / norm;

    // Get the spherical angles from the x y z
    lp.phi = acos(-s) - M_HALFPI;
    lp.lam = atan2(r, q);

    /* Apply the shift from the sphere to the ellipsoid as described
     * in [LK12]. */
    if (P->es != 0.0) {
        int invert_sign;
        volatile double tanphi, xa;
        invert_sign = (lp.phi < 0.0 ? 1 : 0);
        tanphi = tan(lp.phi);
        double one_minus_f = 1.0 - (P->a - P->b) / P->a;
        double a_squared = P->a * P->a;
        xa = P->b / sqrt(tanphi * tanphi + one_minus_f * one_minus_f);
        lp.phi = atan(sqrt(a_squared - xa * xa) / (one_minus_f * xa));
        if (invert_sign) {
            lp.phi = -lp.phi;
        }
    }

    return lp;
}

PJ *PJ_PROJECTION(airocean) {
    char *opt;
    struct pj_airocean_data *Q = static_cast<struct pj_airocean_data *>(
        calloc(1, sizeof(struct pj_airocean_data)));
    if (nullptr == Q)
        return pj_default_destructor(P, PROJ_ERR_OTHER /*ENOMEM*/);
    Q->initialize();
    P->opaque = Q;
    opt = pj_param(P->ctx, P->params, "sorient").s;
    if (opt) {
        if (!strcmp(opt, "horizontal")) {
            Q->transform(orient_horizontal_trans, orient_horizontal_inv_trans);
        } else if (!strcmp(opt, "vertical")) {
            // the orientation is vertical by default.
        } else {
            proj_log_error(
                P,
                _("Invalid value for orient: only vertical or horizontal are supported"));
            return pj_default_destructor(P, PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE);
        }
    }


    P->inv = airocean_inverse;
    P->fwd = airocean_forward;

    return P;
}
