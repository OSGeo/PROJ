/* enable predefined math constants M_* for MS Visual Studio */
#if defined(_MSC_VER) || defined(_WIN32)
#ifndef _USE_MATH_DEFINES
#define _USE_MATH_DEFINES
#endif
#endif

#include <cmath>
#include <cstdint>
#include <errno.h>

#include "proj.h"
#include "proj_internal.h"

PROJ_HEAD(airocean, "Airocean") "\n\tMisc, Sph&Ell";


namespace { // anonymous namespace
    struct pj_face {
        PJ_XYZ p1;
        PJ_XYZ p2;
        PJ_XYZ p3;
    };
}


/*
    The vertices of the faces of the icosahedron are inspired by those used by Robert W. Gray.

    Original Reference:
    Robert W. Gray (1995) Exact Transformation Equations for
        Fuller's World Map, Vol. 32. Autumn, 1995, pp. 17-25.

    To accomodate for land parts that would be interrupted by using a mere icosahedron,
    some faces are split in two (Australia) and 3 (Japan) subfaces.

    The parameters below were computed using the script located at:
    scripts/build_airocean_parameters.py
    (relative to the root of the project)
*/
// Define the 23 faces and subfaces
constexpr pj_face base_ico_faces[23] = {{{0.4201524257659912, 0.07814525067806244, 0.9040825366973877}, {0.5188367366790771, 0.8354203701019287, 0.1813318431377411}, {0.9950094223022461, -0.09134779870510101, 0.04014717414975166}}, {{0.4201524257659912, 0.07814525067806244, 0.9040825366973877}, {-0.4146822392940521, 0.6559624075889587, 0.6306757926940918}, {0.5188367366790771, 0.8354203701019287, 0.1813318431377411}}, {{0.4201524257659912, 0.07814525067806244, 0.9040825366973877}, {-0.515455961227417, -0.38171690702438354, 0.7672010064125061}, {-0.4146822392940521, 0.6559624075889587, 0.6306757926940918}}, {{0.4201524257659912, 0.07814525067806244, 0.9040825366973877}, {0.3557814061641693, -0.8435800075531006, 0.4022342264652252}, {-0.515455961227417, -0.38171690702438354, 0.7672010064125061}}, {{0.4201524257659912, 0.07814525067806244, 0.9040825366973877}, {0.9950094223022461, -0.09134779870510101, 0.04014717414975166}, {0.3557814061641693, -0.8435800075531006, 0.4022342264652252}}, {{0.9950094223022461, -0.09134779870510101, 0.04014717414975166}, {0.5188367366790771, 0.8354203701019287, 0.1813318431377411}, {0.515455961227417, 0.38171690702438354, -0.7672010064125061}}, {{0.515455961227417, 0.38171690702438354, -0.7672010064125061}, {0.5188367366790771, 0.8354203701019287, 0.1813318431377411}, {-0.3557814061641693, 0.8435800075531006, -0.4022342264652252}}, {{-0.3557814061641693, 0.8435800075531006, -0.4022342264652252}, {0.5188367366790771, 0.8354203701019287, 0.1813318431377411}, {-0.4146822392940521, 0.6559624075889587, 0.6306757926940918}}, {{-0.515455961227417, -0.38171690702438354, 0.7672010064125061}, {-0.9950094223022461, 0.09134779870510101, -0.04014717414975166}, {-0.4146822392940521, 0.6559624075889587, 0.6306757926940918}}, {{-0.515455961227417, -0.38171690702438354, 0.7672010064125061}, {-0.5188367366790771, -0.8354203701019287, -0.1813318431377411}, {-0.9950094223022461, 0.09134779870510101, -0.04014717414975166}}, {{-0.515455961227417, -0.38171690702438354, 0.7672010064125061}, {0.3557814061641693, -0.8435800075531006, 0.4022342264652252}, {-0.5188367366790771, -0.8354203701019287, -0.1813318431377411}}, {{-0.5188367366790771, -0.8354203701019287, -0.1813318431377411}, {0.3557814061641693, -0.8435800075531006, 0.4022342264652252}, {0.4146822392940521, -0.6559624075889587, -0.6306757926940918}}, {{0.4146822392940521, -0.6559624075889587, -0.6306757926940918}, {0.3557814061641693, -0.8435800075531006, 0.4022342264652252}, {0.9950094223022461, -0.09134779870510101, 0.04014717414975166}}, {{0.515455961227417, 0.38171690702438354, -0.7672010064125061}, {0.4146822392940521, -0.6559624075889587, -0.6306757926940918}, {0.9950094223022461, -0.09134779870510101, 0.04014717414975166}}, {{-0.4201524257659912, -0.07814525067806244, -0.9040825366973877}, {-0.3557814061641693, 0.8435800075531006, -0.4022342264652252}, {-0.9950094223022461, 0.09134779870510101, -0.04014717414975166}}, {{-0.4201524257659912, -0.07814525067806244, -0.9040825366973877}, {-0.9950094223022461, 0.09134779870510101, -0.04014717414975166}, {-0.5188367366790771, -0.8354203701019287, -0.1813318431377411}}, {{-0.4201524257659912, -0.07814525067806244, -0.9040825366973877}, {-0.5188367366790771, -0.8354203701019287, -0.1813318431377411}, {0.4146822392940521, -0.6559624075889587, -0.6306757926940918}}, {{-0.4201524257659912, -0.07814525067806244, -0.9040825366973877}, {0.4146822392940521, -0.6559624075889587, -0.6306757926940918}, {0.515455961227417, 0.38171690702438354, -0.7672010064125061}}, {{-0.3557814061641693, 0.8435800075531006, -0.4022342264652252}, {-0.38796690106391907, 0.3827173709869385, -0.6531583666801453}, {0.515455961227417, 0.38171690702438354, -0.7672010064125061}}, {{-0.4201524257659912, -0.07814525067806244, -0.9040825366973877}, {0.515455961227417, 0.38171690702438354, -0.7672010064125061}, {-0.38796690106391907, 0.3827173709869385, -0.6531583666801453}}, {{-0.9950094223022461, 0.09134779870510101, -0.04014717414975166}, {-0.3557814061641693, 0.8435800075531006, -0.4022342264652252}, {-0.5884910225868225, 0.5302967429161072, 0.06276480108499527}}, {{-0.3557814061641693, 0.8435800075531006, -0.4022342264652252}, {-0.4146822392940521, 0.6559624075889587, 0.6306757926940918}, {-0.5884910225868225, 0.5302967429161072, 0.06276480108499527}}, {{-0.9950094223022461, 0.09134779870510101, -0.04014717414975166}, {-0.5884910225868225, 0.5302967429161072, 0.06276480108499527}, {-0.4146822392940521, 0.6559624075889587, 0.6306757926940918}}};
// // Define the centers for each face or subface
constexpr PJ_XYZ base_ico_centers[23] = {{0.6446661949157715, 0.2740726172924042, 0.3751871883869171}, {0.17476896941661835, 0.5231760144233704, 0.5720300674438477}, {-0.1699952632188797, 0.11746358871459961, 0.7673197388648987}, {0.08682596683502197, -0.38238391280174255, 0.6911725997924805}, {0.5903144478797913, -0.2855941951274872, 0.4488213062286377}, {0.6764340400695801, 0.37526312470436096, -0.18190734088420868}, {0.22617042064666748, 0.6869058012962341, -0.3293677866458893}, {-0.0838756337761879, 0.7783209681510925, 0.1365911364555359}, {-0.6417158842086792, 0.1218644380569458, 0.45257654786109924}, {-0.6764340400695801, -0.37526318430900574, 0.18190734088420868}, {-0.22617042064666748, -0.6869058012962341, 0.3293677866458893}, {0.0838756337761879, -0.7783209681510925, -0.1365911364555359}, {0.5884910225868225, -0.5302967429161072, -0.06276480108499527}, {0.6417158842086792, -0.1218644380569458, -0.45257651805877686}, {-0.5903144478797913, 0.2855941951274872, -0.4488213062286377}, {-0.6446661949157715, -0.2740726172924042, -0.3751871883869171}, {-0.17476896941661835, -0.5231760144233704, -0.5720300674438477}, {0.1699952632188797, -0.11746358871459961, -0.7673197388648987}, {-0.07609745115041733, 0.5360047817230225, -0.6075312495231628}, {-0.09755445271730423, 0.22876299917697906, -0.7748139500617981}, {-0.64642733335495, 0.4884081780910492, -0.12653887271881104}, {-0.45298489928245544, 0.6766130924224854, 0.09706878662109375}, {-0.6660608649253845, 0.4258689880371094, 0.2177644819021225}};
// // Define the normals for each face and subface
constexpr PJ_XYZ base_ico_normals[23] = {{0.8112534880638123, 0.3448953330516815, 0.47213879227638245}, {0.2199307233095169, 0.6583691835403442, 0.719847559928894}, {-0.21392348408699036, 0.1478172093629837, 0.9656018614768982}, {0.10926257073879242, -0.4811951518058777, 0.869777500629425}, {0.7428567409515381, -0.35939422249794006, 0.5648006200790405}, {0.8512303829193115, 0.4722343385219574, -0.22891369462013245}, {0.28461483120918274, 0.8644080758094788, -0.41447925567626953}, {-0.10554979741573334, 0.9794456958770752, 0.17188747227191925}, {-0.807540774345398, 0.15335525572299957, 0.569526195526123}, {-0.8512304425239563, -0.4722343385219574, 0.22891372442245483}, {-0.28461483120918274, -0.8644080758094788, 0.41447925567626953}, {0.10554979741573334, -0.9794456958770752, -0.17188745737075806}, {0.7405621409416199, -0.6673299074172974, -0.07898375391960144}, {0.807540774345398, -0.15335525572299957, -0.569526195526123}, {-0.7428567409515381, 0.35939422249794006, -0.5648006200790405}, {-0.8112534880638123, -0.3448953330516815, -0.47213879227638245}, {-0.2199307233095169, -0.6583691835403442, -0.719847559928894}, {0.21392348408699036, -0.1478172093629837, -0.9656018614768982}, {-0.10926257818937302, 0.4811951220035553, -0.8697775602340698}, {-0.10926257073879242, 0.4811951518058777, -0.869777500629425}, {-0.7405622601509094, 0.6673299670219421, 0.07898380607366562}, {-0.7405621409416199, 0.6673299670219421, 0.07898376882076263}, {-0.7405622005462646, 0.6673300266265869, 0.07898370921611786}};

// /*
//     The points of the Airocean projection map are deduced from the unfolded net
//     of the altered icosahedron defined above.
//     The distances in the projected 2d space are expressed in meter.
// */
// // Define the 23 unfolded surfaces used (from icosahedron + split faces)
constexpr pj_face base_airocean_faces[23] = {{{1.8211859946200586, 3.1543866727148018, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {2.7317789919300877, 3.6801177848339353, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {0.9105929973100293, 2.628655560595668, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {0.9105929973100293, 2.628655560595668, 1.0}}, {{1.8211859946200586, 3.1543866727148018, 1.0}, {2.7317789919300877, 3.6801177848339353, 1.0}, {2.7317789919300877, 2.628655560595668, 1.0}}, {{2.7317789919300877, 3.6801177848339353, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {2.7317789919300877, 4.731580009072203, 1.0}}, {{1.8211859946200586, 5.257311121191336, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {0.9105929973100293, 4.731580009072203, 1.0}}, {{0.9105929973100293, 4.731580009072203, 1.0}, {1.8211859946200586, 4.205848896953069, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}, {{0.9105929973100293, 2.628655560595668, 1.0}, {0.0, 3.1543866727148018, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}, {{0.9105929973100293, 2.628655560595668, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}, {0.0, 2.1029244484765344, 1.0}}, {{0.9105929973100293, 2.628655560595668, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}}, {{0.9105929973100293, 1.5771933363574009, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}}, {{1.8211859946200586, 1.0514622242382672, 1.0}, {1.8211859946200586, 2.1029244484765344, 1.0}, {2.7317789919300877, 1.5771933363574009, 1.0}}, {{1.8211859946200586, 0.0, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}, {2.7317789919300877, 0.5257311121191336, 1.0}}, {{0.0, 5.257311121191336, 1.0}, {0.9105929973100293, 4.731580009072203, 1.0}, {0.0, 4.205848896953069, 1.0}}, {{0.0, 1.0514622242382672, 1.0}, {0.0, 2.1029244484765344, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}}, {{0.9105929973100293, 0.5257311121191336, 1.0}, {0.9105929973100293, 1.5771933363574009, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}}, {{0.9105929973100293, 0.5257311121191336, 1.0}, {1.8211859946200586, 1.0514622242382672, 1.0}, {1.8211859946200586, 0.0, 1.0}}, {{0.9105929973100293, 4.731580009072203, 1.0}, {0.45529649865501465, 4.994445565131769, 1.0}, {0.9105929973100293, 5.78304223331047, 1.0}}, {{0.9105929973100293, 0.5257311121191336, 1.0}, {1.8211859946200586, 0.0, 1.0}, {0.9105929973100293, 0.0, 1.0}}, {{0.0, 4.205848896953069, 1.0}, {0.9105929973100293, 4.731580009072203, 1.0}, {0.6070619982066862, 4.205848896953069, 1.0}}, {{0.9105929973100293, 4.731580009072203, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}, {0.6070619982066862, 4.205848896953069, 1.0}}, {{0.0, 3.1543866727148018, 1.0}, {0.3035309991033431, 3.6801177848339353, 1.0}, {0.9105929973100293, 3.6801177848339353, 1.0}}};

// /*
//     The parameters here are extracted from the transition matrices
//     that allow converting a icosahedron face or subface to its
//     corresponding face in the Airocean projected space.
//     Since only a few parameters of those matrices are relevant,
//     the irrelevant ones has been discarded.
// */
// // Icosahedron to Airocean (forward)
constexpr double base_ico_air_trans[23][4][4] = {{{0.5771127939224243, -0.6019490957260132, -0.5519041419029236, 2.1247169971466064}, {0.09385434538125992, 0.7202114462852478, -0.6873767971992493, 3.6801178455352783}, {0.8112534284591675, 0.34489527344703674, 0.47213873267173767, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.9709901213645935, -0.21873608231544495, -0.09660579264163971, 1.5176548957824707}, {0.09385436028242111, 0.7202114462852478, -0.6873767971992493, 3.6801178455352783}, {0.2199307531118393, 0.6583691239356995, 0.7198475003242493, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.9721373915672302, -0.0647682175040245, 0.2252863347530365, 1.2141239643096924}, {0.09584151208400726, 0.9868916273117065, -0.12984317541122437, 3.1543867588043213}, {-0.21392345428466797, 0.1478171944618225, 0.9656017422676086, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.9921258687973022, -0.0010986793786287308, -0.12523998320102692, 1.5176550149917603}, {0.06122048944234848, 0.8766127824783325, 0.47728613018989563, 2.628655433654785}, {0.10926255583763123, -0.4811951816082001, 0.8697775602340698, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.2803041338920593, -0.5991800427436829, -0.7499419450759888, 2.4282479286193848}, {0.6079420447349548, 0.7154152989387512, -0.3443652391433716, 3.154386520385742}, {0.7428567409515381, -0.3593941330909729, 0.5648005604743958, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.25960659980773926, -0.7580069899559021, -0.5983559489250183, 2.4282479286193848}, {-0.45608240365982056, 0.44991129636764526, -0.7678337097167969, 4.205848693847656}, {0.8512304425239563, 0.4722343981266022, -0.22891373932361603, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.9586365818977356, -0.25808605551719666, 0.12003126740455627, 1.5176550149917603}, {-0.003215298056602478, -0.43149760365486145, -0.9021083116531372, 4.731579780578613}, {0.28461480140686035, 0.8644081354141235, -0.41447922587394714, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.9928349256515503, 0.09405866265296936, 0.07370038330554962, 1.2141239643096924}, {0.056018028408288956, 0.17843492329120636, -0.9823558330535889, 4.205848693847656}, {-0.10554979741573334, 0.9794456958770752, 0.17188745737075806, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.5819727778434753, 0.05026942864060402, 0.8116530776023865, 0.6070619821548462}, {0.09584151953458786, 0.9868916273117065, -0.12984316051006317, 3.1543867588043213}, {-0.807540774345398, 0.15335525572299957, 0.569526195526123, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.5247822999954224, -0.7686380743980408, 0.36578553915023804, 0.6070619821548462}, {0.0032153178472071886, 0.4314976632595062, 0.9021083116531372, 2.102924346923828}, {-0.8512304425239563, -0.4722343683242798, 0.22891372442245483, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.9586365818977356, -0.25808605551719666, 0.12003126740455627, 1.2141239643096924}, {0.003215298056602478, 0.43149760365486145, 0.9021083116531372, 2.102924346923828}, {-0.28461480140686035, -0.8644081354141235, 0.41447922587394714, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.9928349256515503, 0.09405866265296936, 0.07370038330554962, 1.5176550149917603}, {-0.056018028408288956, -0.17843492329120636, 0.9823558330535889, 1.5771933794021606}, {0.10554979741573334, -0.9794456958770752, -0.17188745737075806, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696488857269287, 0.7230710983276367, 0.169524684548378, 2.1247169971466064}, {-0.056018002331256866, -0.17843493819236755, 0.9823558330535889, 1.5771933794021606}, {0.7405622005462646, -0.6673299670219421, -0.07898376137018204, -0.7946545481681824}, {0.0, 0.0, 0.0, 1.0}}, {{0.5819727778434753, 0.05026942864060402, 0.8116530776023865, 2.1247169971466064}, {-0.09584151953458786, -0.9868916273117065, 0.12984316051006317, 0.525731086730957}, {0.807540774345398, -0.15335525572299957, -0.569526195526123, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.3863411843776703, 0.919157862663269, 0.07674192637205124, 0.30353105068206787}, {0.5467215180397034, -0.1611974686384201, -0.8216513991355896, 4.7315802574157715}, {-0.7428567409515381, 0.3593941330909729, -0.5648005604743958, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.2072761356830597, -0.9246959686279297, 0.3193337023258209, 0.3035309910774231}, {-0.5467215180397034, 0.1611974686384201, 0.8216513991355896, 1.5771933794021606}, {-0.8112534284591675, -0.34489527344703674, -0.47213873267173767, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.9709901213645935, -0.21873608231544495, -0.09660579264163971, 1.214124083518982}, {-0.09385436028242111, -0.7202114462852478, 0.6873767971992493, 1.0514622926712036}, {-0.2199307531118393, -0.6583691239356995, -0.7198475003242493, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.9721373915672302, -0.0647682175040245, 0.2252863347530365, 1.5176550149917603}, {-0.09584151208400726, -0.9868916273117065, 0.12984317541122437, 0.5257311463356018}, {0.21392345428466797, -0.1478171944618225, -0.9656017422676086, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.5490814447402954, 0.7586196660995483, 0.3507218658924103, 0.6070619225502014}, {0.8285959959030151, -0.4392578899860382, -0.347104012966156, 5.2573113441467285}, {-0.10926257073879242, 0.4811950922012329, -0.869777500629425, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.9921258687973022, -0.0010987052228301764, -0.12523998320102692, 1.2141239643096924}, {-0.06122048571705818, -0.8766128420829773, -0.47728610038757324, 1.6207629016662395e-08}, {-0.10926257073879242, 0.4811951816082001, -0.869777500629425, -0.7946544885635376}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696488261222839, 0.7230710983276367, 0.1695246696472168, 0.6070619225502014}, {0.05601797252893448, 0.17843496799468994, -0.9823558330535889, 4.205848693847656}, {-0.7405620813369751, 0.6673298478126526, 0.07898373901844025, -0.794654369354248}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696490049362183, 0.7230709791183472, 0.1695246696472168, 0.607062041759491}, {0.05601801350712776, 0.17843490839004517, -0.9823558330535889, 4.205848693847656}, {-0.7405621409416199, 0.6673299074172974, 0.07898375391960144, -0.7946544289588928}, {0.0, 0.0, 0.0, 1.0}}, {{0.28631141781806946, 0.20700636506080627, 0.9355074763298035, 0.3035309612751007}, {0.6079419851303101, 0.715415358543396, -0.3443652391433716, 3.6801178455352783}, {-0.7405620813369751, 0.6673298478126526, 0.07898375391960144, -0.794654369354248}, {0.0, 0.0, 0.0, 1.0}}};
// // Airocean to Icosahedron (inverse)
constexpr double base_air_ico_trans[23][4][4] = {{{0.5771127343177795, 0.09385436028242111, 0.811253547668457, -0.9269301891326904}, {-0.6019490957260132, 0.7202114462852478, 0.3448953330516815, -1.0974189043045044}, {-0.5519040822982788, -0.6873767375946045, 0.47213879227638245, 4.077454566955566}, {0.0, 0.0, 0.0, 1.0}}, {{0.9709901213645935, 0.09385436028242111, 0.2199307233095169, -1.6442540884017944}, {-0.21873614192008972, 0.7202114462852478, 0.658369243144989, -1.7953208684921265}, {-0.09660584479570389, -0.6873767375946045, 0.719847559928894, 3.248271942138672}, {0.0, 0.0, 0.0, 1.0}}, {{0.9721373915672302, 0.09584150463342667, -0.21392349898815155, -1.6526118516921997}, {-0.0647682324051857, 0.9868916869163513, 0.1478171944618225, -2.9169375896453857}, {0.2252863049507141, -0.12984319031238556, 0.9656018018722534, 0.9033699035644531}, {0.0, 0.0, 0.0, 1.0}}, {{0.9921258687973022, 0.061220478266477585, 0.10926257818937302, -1.5798063278198242}, {-0.0010987031273543835, 0.8766128420829773, -0.4811951518058777, -2.6850295066833496}, {-0.12523995339870453, 0.47728610038757324, 0.8697774410247803, -0.37337714433670044}, {0.0, 0.0, 0.0, 1.0}}, {{0.2803041338920593, 0.6079419851303101, 0.7428567409515381, -2.0080175399780273}, {-0.5991800427436829, 0.715415358543396, -0.35939422249794006, -1.087333083152771}, {-0.749941885471344, -0.3443652391433716, 0.5648006200790405, 3.3561272621154785}, {0.0, 0.0, 0.0, 1.0}}, {{0.25960659980773926, -0.45608243346214294, 0.8512303829193115, 1.9642586708068848}, {-0.7580069303512573, 0.4499112665653229, 0.472234308719635, 0.3236331641674042}, {-0.5983559489250183, -0.7678337693214417, -0.22891369462013245, 4.500442028045654}, {0.0, 0.0, 0.0, 1.0}}, {{0.9586365818977356, -0.0032153085339814425, 0.28461480140686035, -1.2134956121444702}, {-0.25808608531951904, -0.43149763345718384, 0.8644081354141235, 3.1202569007873535}, {0.12003128230571747, -0.902108371257782, -0.41447922587394714, 3.756864070892334}, {0.0, 0.0, 0.0, 1.0}}, {{0.9928349852561951, 0.05601802095770836, -0.10554980486631393, -1.524903655052185}, {0.09405866265296936, 0.17843493819236755, 0.9794458150863647, -0.08634835481643677}, {0.07370039075613022, -0.9823558330535889, 0.17188745737075806, 4.1787495613098145}, {0.0, 0.0, 0.0, 1.0}}, {{0.5819727778434753, 0.09584150463342667, -0.807540774345398, -1.297330617904663}, {0.050269387662410736, 0.9868916869163513, 0.15335524082183838, -3.0216901302337646}, {0.8116530179977417, -0.12984319031238556, 0.569526195526123, 0.36942845582962036}, {0.0, 0.0, 0.0, 1.0}}, {{0.5247822999954224, 0.0032153085339814425, -0.8512303829193115, -1.0017709732055664}, {-0.7686380743980408, 0.43149763345718384, -0.4722343683242798, -0.8160591125488281}, {0.36578553915023804, 0.902108371257782, 0.22891375422477722, -1.9372128248214722}, {0.0, 0.0, 0.0, 1.0}}, {{0.9586365818977356, 0.0032153085339814425, -0.28461480140686035, -1.3968356847763062}, {-0.25808608531951904, 0.43149763345718384, -0.8644081354141235, -1.2809642553329468}, {0.12003128230571747, 0.902108371257782, 0.41447922587394714, -1.7134307622909546}, {0.0, 0.0, 0.0, 1.0}}, {{0.9928349852561951, -0.05601802095770836, 0.10554980486631393, -1.3345540761947632}, {0.09405866265296936, -0.17843493819236755, -0.9794458150863647, -0.639643132686615}, {0.07370039075613022, 0.9823558330535889, -0.17188745737075806, -1.7978079319000244}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696488857269287, -0.05601802095770836, 0.7405621409416199, -0.7459721565246582}, {0.7230710387229919, -0.17843493819236755, -0.6673298478126526, -1.7851916551589966}, {0.1695246547460556, 0.9823558330535889, -0.07898375391960144, -1.9723217487335205}, {0.0, 0.0, 0.0, 1.0}}, {{0.5819727778434753, -0.09584150463342667, 0.807540774345398, -0.5444246530532837}, {0.050269387662410736, -0.9868916869163513, -0.15335524082183838, 0.2901670038700104}, {0.8116530179977417, 0.12984319031238556, -0.569526195526123, -2.2453720569610596}, {0.0, 0.0, 0.0, 1.0}}, {{0.3863411247730255, 0.5467215180397034, -0.7428567409515381, -3.2944374084472656}, {0.919157862663269, -0.1611974686384201, 0.35939422249794006, 0.769320011138916}, {0.07674188911914825, -0.8216513395309448, -0.5648006200790405, 3.4155943393707275}, {0.0, 0.0, 0.0, 1.0}}, {{0.2072761207818985, -0.5467215180397034, -0.811253547668457, 0.15470457077026367}, {-0.9246959090232849, 0.1611974686384201, -0.3448953330516815, -0.2476383000612259}, {0.31933367252349854, 0.8216513395309448, -0.47213879227638245, -1.7680178880691528}, {0.0, 0.0, 0.0, 1.0}}, {{0.9709901213645935, -0.09385436028242111, -0.2199307233095169, -1.254987120628357}, {-0.21873614192008972, -0.7202114462852478, -0.658369243144989, 0.49967190623283386}, {-0.09660584479570389, 0.6873767375946045, -0.719847559928894, -1.1774892807006836}, {0.0, 0.0, 0.0, 1.0}}, {{0.9721373915672302, -0.09584150463342667, 0.21392349898815155, -1.254987120628357}, {-0.0647682324051857, -0.9868916869163513, -0.1478171944618225, 0.49967190623283386}, {0.2252863049507141, 0.12984319031238556, -0.9656018018722534, -1.1774892807006836}, {0.0, 0.0, 0.0, 1.0}}, {{0.5490813851356506, 0.8285959959030151, -0.10926257818937302, -4.776339054107666}, {0.7586196064949036, -0.4392579197883606, 0.4811951220035553, 2.231170177459717}, {0.35072189569473267, -0.3471040427684784, -0.8697775602340698, 0.9207513928413391}, {0.0, 0.0, 0.0, 1.0}}, {{0.9921258687973022, -0.061220504343509674, -0.10926257818937302, -1.2913897037506104}, {-0.0010986949782818556, -0.8766127824783325, 0.4811951220035553, 0.3837178349494934}, {-0.12523996829986572, -0.47728613018989563, -0.869777500629425, -0.5391157269477844}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696488857269287, 0.05601802095770836, -0.7405623197555542, -1.2306127548217773}, {0.7230710387229919, 0.17843492329120636, 0.6673299074172974, -0.6591225266456604}, {0.1695246547460556, -0.9823558330535889, 0.07898379862308502, 4.091493129730225}, {0.0, 0.0, 0.0, 1.0}}, {{0.6696488857269287, 0.05601802095770836, -0.7405621409416199, -1.2306127548217773}, {0.7230709791183472, 0.17843493819236755, 0.6673300862312317, -0.6591225862503052}, {0.1695246398448944, -0.9823558330535889, 0.07898376882076263, 4.091493129730225}, {0.0, 0.0, 0.0, 1.0}}, {{0.28631141781806946, 0.6079419851303101, -0.7405622601509094, -2.912693500518799}, {0.2070063054561615, 0.715415358543396, 0.6673300266265869, -2.165348768234253}, {0.9355074167251587, -0.3443652391433716, 0.07898371666669846, 1.0461139678955078}, {0.0, 0.0, 0.0, 1.0}}};


// By default the resulting orientation of the projection is vertical
// the following transforms are used to alter the projection data
// so that the resulting orientation is horizontal instead
constexpr double orient_horizontal_trans[4][4] = {{0.0, -1.0, 0.0, 5.7830424308776855}, {1.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 1.0, 0.0}, {0.0, 0.0, 0.0, 1.0}};
constexpr double orient_horizontal_inv_trans[4][4] = {{0.0, 1.0, 0.0, 0.0}, {-1.0, -0.0, -0.0, 5.7830424308776855}, {0.0, 0.0, 1.0, 0.0}, {0.0, 0.0, 0.0, 1.0}};

namespace { // anonymous namespace

    struct pj_airocean_data {
        pj_face ico_faces[23] = {};
        PJ_XYZ ico_centers[23] = {};
        PJ_XYZ ico_normals[23] = {};
        pj_face airocean_faces[23] = {};
        double ico_air_trans[23][4][4] = {};
        double air_ico_trans[23][4][4] = {};

        void initialize() {
            memcpy((char *) this->ico_faces, (char *) base_ico_faces, sizeof(pj_face[23]));
            memcpy((char *) this->airocean_faces, (char *) base_airocean_faces, sizeof(pj_face[23]));
            memcpy(this->ico_centers, base_ico_centers, sizeof(PJ_XYZ[23]));
            memcpy(this->ico_normals, base_ico_normals, sizeof(PJ_XYZ[23]));
            memcpy(this->ico_air_trans, base_ico_air_trans, sizeof(double[23][4][4]));
            memcpy(this->air_ico_trans, base_air_ico_trans, sizeof(double[23][4][4]));
        }

        static void mat_mult(const double m1[4][4], const double m2[4][4], double res[4][4]) {
            for (unsigned char i = 0; i < 4; ++i)
                for (unsigned char j = 0; j < 4; ++j)
                    res[i][j] = (m1[i][0] * m2[0][j])
                            + (m1[i][1] * m2[1][j])
                            + (m1[i][2] * m2[2][j])
                            + (m1[i][3] * m2[3][j]);
        }

        static PJ_XYZ vec_mult(const double m[4][4], const PJ_XYZ * v) {
            double x = m[0][0] * v->x + m[0][1] * v->y + m[0][2] * v->z + m[0][3];
            double y = m[1][0] * v->x + m[1][1] * v->y + m[1][2] * v->z + m[1][3];
            double z = m[2][0] * v->x + m[2][1] * v->y + m[2][2] * v->z + m[2][3];
            return {x, y, z};
        }

        void transform(const double m[4][4], const double inv_m[4][4]) {
            for (unsigned char i=0; i < 23; i++) {
                mat_mult(m, base_ico_air_trans[i], this->ico_air_trans[i]);
                mat_mult(base_air_ico_trans[i], inv_m, this->air_ico_trans[i]);
                this->airocean_faces[i] = {
                    vec_mult(m, &base_airocean_faces[i].p1),
                    vec_mult(m, &base_airocean_faces[i].p2),
                    vec_mult(m, &base_airocean_faces[i].p3),
                };
            }

        }


    };



} // anonymous namespace




inline double det(const PJ_XYZ *u, const PJ_XYZ *v, const PJ_XYZ *w) {
    return (
        u->x * (v->y * w->z - v->z * w->y) -
        v->x * (u->y * w->z - u->z * w->y) +
        w->x * (u->y * v->z - u->z * v->y)
    );
}

inline bool is_point_in_face(const PJ_XYZ *p, const pj_face * face) {
    return (
        det(p, &face->p2, &face->p3) <= 0 &&
        det(&face->p1, p, &face->p3) <= 0 &&
        det(&face->p1, &face->p2, p) <= 0
    );
}


inline unsigned char get_ico_face_index(const pj_airocean_data * pj_data, const PJ_XYZ *p) {
    for (unsigned char i=0; i < 23; i++) {
        if (is_point_in_face(p, &pj_data->ico_faces[i])) {
            return i;
        }
    }

    return 23;
}

inline unsigned char get_dym_face_index(const pj_airocean_data * pj_data, const PJ_XY *p) {
    const PJ_XYZ pp{p->x, p->y, 1.0};
    for (unsigned char i=0; i < 23; i++) {
        if (is_point_in_face(&pp, &pj_data->airocean_faces[i])) {
            return i;
        }
    }

    return 23;
}

inline PJ_XY ico_to_dym(const pj_airocean_data * pj_data, const PJ_XYZ * p, unsigned char face_id) {
    return PJ_XY{
        pj_data->ico_air_trans[face_id][0][0] * p->x + // * -1
        pj_data->ico_air_trans[face_id][0][1] * p->y + // 
        pj_data->ico_air_trans[face_id][0][2] * p->z + // 
        pj_data->ico_air_trans[face_id][0][3],         // +1000
        pj_data->ico_air_trans[face_id][1][0] * p->x +
        pj_data->ico_air_trans[face_id][1][1] * p->y +
        pj_data->ico_air_trans[face_id][1][2] * p->z +
        pj_data->ico_air_trans[face_id][1][3],
    };
}

inline PJ_XYZ dym_to_ico(const pj_airocean_data * pj_data, const PJ_XY * p, unsigned char face_id) {
    return PJ_XYZ{
        pj_data->air_ico_trans[face_id][0][0] * p->x + // * -1
        pj_data->air_ico_trans[face_id][0][1] * p->y + // 
        pj_data->air_ico_trans[face_id][0][3],         // + [face_id][0][0] * 1000
        pj_data->air_ico_trans[face_id][1][0] * p->x +
        pj_data->air_ico_trans[face_id][1][1] * p->y +
        pj_data->air_ico_trans[face_id][1][3],
        pj_data->air_ico_trans[face_id][2][0] * p->x +
        pj_data->air_ico_trans[face_id][2][1] * p->y +
        pj_data->air_ico_trans[face_id][2][3],
    };
}

inline PJ_XYZ cartesian_to_ico(const pj_airocean_data * pj_data, const PJ_XYZ *p, unsigned char face_id) {
    const PJ_XYZ * center = &pj_data->ico_centers[face_id];
    const PJ_XYZ * normal = &pj_data->ico_normals[face_id];

    // cppcheck-suppress unreadVariable
    double a = 1.0 - (
        center->x * normal->x +
        center->y * normal->y +
        center->z * normal->z
    ) / (
        p->x * normal->x +
        p->y * normal->y +
        p->z * normal->z
    );

    return PJ_XYZ{
        p->x - a * p->x,
        p->y - a * p->y,
        p->z - a * p->z,
    };
}


// ============================================
//
//      The Forward and Inverse Functions
//
// ============================================
static PJ_XY airocean_forward(PJ_LP lp, PJ *P) {
    const struct pj_airocean_data *Q =
        static_cast<struct pj_airocean_data *>(P->opaque);

    double lat;

    /* Convert the geodetic latitude to a geocentric latitude.
     * This corresponds to the shift from the ellipsoid to the sphere
     * described in [LK12]. */
    if (P->es != 0.0) {
        double one_minus_f = 1.0 - (P->a - P->b) / P->a;
        double one_minus_f_squared = one_minus_f * one_minus_f;
        lat = atan(one_minus_f_squared * tan(lp.phi));
    } else {
        lat = lp.phi;
    }

    // Convert the lat/long to x,y,z on the unit sphere
    double x, y, z;
    double sinlat, coslat;
    double sinlon, coslon;

    sinlat = sin(lat);
    coslat = cos(lat);
    sinlon = sin(lp.lam);
    coslon = cos(lp.lam);
    x = coslat * coslon;
    y = coslat * sinlon;
    z = sinlat;

    PJ_XYZ cartesianPoint{x, y, z};

    unsigned char face_id = get_ico_face_index(Q, &cartesianPoint);

    PJ_XYZ icoPoint = cartesian_to_ico(Q, &cartesianPoint, face_id);

    PJ_XY airoceanPoint = ico_to_dym(Q, &icoPoint, face_id);


    return airoceanPoint;
}


static PJ_LP airocean_inverse(PJ_XY xy, PJ *P) {
    const struct pj_airocean_data *Q =
        static_cast<struct pj_airocean_data *>(P->opaque);

    PJ_LP lp = {0.0, 0.0};


    unsigned char face_id = get_dym_face_index(Q, &xy);

    if (face_id == 23) {
        // Point lies outside icosahedron net faces
        proj_errno_set(P, PROJ_ERR_COORD_TRANSFM_OUTSIDE_PROJECTION_DOMAIN);
        lp.lam = HUGE_VAL;
        lp.phi = HUGE_VAL;
        return lp;
    }

    PJ_XYZ sphereCoords = dym_to_ico(Q, &xy, face_id);

    double norm = sqrt((sphereCoords.x * sphereCoords.x) + (sphereCoords.y * sphereCoords.y) + (sphereCoords.z * sphereCoords.z));
    double q = sphereCoords.x / norm;
    double r = sphereCoords.y / norm;
    double s = sphereCoords.z / norm;

    // Get the spherical angles from the x y z
    lp.phi = acos(-s) - M_HALFPI;
    lp.lam = atan2(r, q);

    /* Apply the shift from the sphere to the ellipsoid as described
     * in [LK12]. */
    if (P->es != 0.0) {
        int invert_sign;
        volatile double tanphi, xa;
        invert_sign = (lp.phi < 0.0 ? 1 : 0);
        tanphi = tan(lp.phi);
        double one_minus_f = 1.0 - (P->a - P->b) / P->a;
        double a_squared = P->a * P->a;
        xa = P->b / sqrt(tanphi * tanphi + one_minus_f * one_minus_f);
        lp.phi = atan(sqrt(a_squared - xa * xa) / (one_minus_f * xa));
        if (invert_sign) {
            lp.phi = -lp.phi;
        }
    }

    return lp;
}

PJ *PJ_PROJECTION(airocean) {
    char *opt;
    struct pj_airocean_data *Q = static_cast<struct pj_airocean_data *>(
        calloc(1, sizeof(struct pj_airocean_data)));
    if (nullptr == Q)
        return pj_default_destructor(P, PROJ_ERR_OTHER /*ENOMEM*/);
    Q->initialize();
    P->opaque = Q;
    opt = pj_param(P->ctx, P->params, "sorient").s;
    if (opt) {
        if (!strcmp(opt, "horizontal")) {
            Q->transform(orient_horizontal_trans, orient_horizontal_inv_trans);
        } else if (!strcmp(opt, "vertical")) {
            // the orientation is vertical by default.
        } else {
            proj_log_error(
                P,
                _("Invalid value for orient: only vertical or horizontal are supported"));
            return pj_default_destructor(P, PROJ_ERR_INVALID_OP_ILLEGAL_ARG_VALUE);
        }
    }


    P->inv = airocean_inverse;
    P->fwd = airocean_forward;

    return P;
}
